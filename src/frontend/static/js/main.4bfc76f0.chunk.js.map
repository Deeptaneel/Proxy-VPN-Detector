{"version":3,"sources":["logo.svg","Components/TitleBar.js","Components/ThirdParty.js","Components/WHOIS.js","Single.js","Components/IPDisplay.js","Components/Processing.js","Batch.js","CloudSettings.js","ContentManager.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","Typography","electron","window","require","theWindow","ipcRenderer","remote","BrowserWindow","getFocusedWindow","TitleBar","className","DingdingOutlined","style","fontSize","color","level","class","id","onClick","close","minimize","maximize","columns","title","dataIndex","key","render","text","tag","ThirdParty","data","dataSource","pagination","scroll","y","WHOISData","Search","Input","TabPane","Tabs","Paragraph","dialog","ResultTitle","programState","signature","type","Single","useState","updateProgramState","signatureMatched","updateSignatureMatched","ip","updateIp","score","updateScore","thirdPartData","updateThirdPartyData","whoisData","updateWhoISData","useEffect","on","e","console","log","result","sig","table","value","removeAllListeners","placeholder","loading","enterButton","onSearch","send","defaultActiveKey","onChange","tab","WHOIS","bordered","width","percent","status","format","alert","ProcessingTable","Batch","good","updateGood","bad","updateBad","processing","updateProcessing","state","Object","keys","forEach","push","UploadOutlined","length","precision","valueStyle","prefix","CheckOutlined","suffix","WarningOutlined","DotChartOutlined","IPDisplay","Processing","CloudSettings","ContentManager","content","Sider","Layout","Header","Footer","Content","SubMenu","Menu","App","updateContent","height","defaultSelectedKeys","defaultOpenKeys","mode","AreaChartOutlined","ItemGroup","Item","icon","AppstoreOutlined","SettingOutlined","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4bfc76f0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from \"react\";\r\nimport { DingdingOutlined } from \"@ant-design/icons\";\r\nimport { Typography, TimePicker } from \"antd\";\r\n\r\nimport \"./../assets/TrafficLights.scss\";\r\n\r\nconst { Title } = Typography;\r\n\r\nconst electron = window.require(\"electron\");\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nconst { BrowserWindow } = electron.remote;\r\n// Retrieve focused window\r\n\r\n// Execute common tasks\r\n// Minimize\r\n\r\n// Maximize app\r\n\r\n// Close app\r\nconst theWindow = BrowserWindow.getFocusedWindow();\r\n\r\nfunction TitleBar() {\r\n  return (\r\n    <div className=\"title-bar\">\r\n      <DingdingOutlined style={{ fontSize: \"24px\", color: \"#ffffff\" }} />\r\n      <Title level={4} style={{ color: \"#ffffff\" }}>\r\n        InfoWise{\" \"}\r\n      </Title>\r\n\r\n      <div class=\"actions focus\">\r\n        <div class=\"traffic-lights focus\">\r\n          <button\r\n            class=\"traffic-light traffic-light-close\"\r\n            id=\"close\"\r\n            onClick={() => {\r\n              theWindow.close();\r\n            }}\r\n          ></button>\r\n          <button\r\n            class=\"traffic-light traffic-light-minimize\"\r\n            id=\"minimize\"\r\n            onClick={() => {\r\n              theWindow.minimize();\r\n            }}\r\n          ></button>\r\n          <button\r\n            class=\"traffic-light traffic-light-maximize\"\r\n            id=\"maximize\"\r\n            onClick={() => {\r\n              theWindow.maximize();\r\n            }}\r\n          ></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TitleBar;\r\n","import React from \"react\";\r\nimport { Table, Tag, Space } from \"antd\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"Type\",\r\n    dataIndex: \"type\",\r\n    key: \"type\",\r\n  },\r\n  {\r\n    title: \"Status\",\r\n    dataIndex: \"status\",\r\n    key: \"status\",\r\n  },\r\n  {\r\n    title: \"Score\",\r\n    key: \"score\",\r\n    dataIndex: \"score\",\r\n    render: (tag) => {\r\n      let color = \"green\";\r\n      if (tag > 50) {\r\n        color = \"volcano\";\r\n      }\r\n      return <Tag color={color}>{tag}</Tag>;\r\n    },\r\n  },\r\n];\r\n\r\nfunction ThirdParty({ data }) {\r\n  return (\r\n    <div className=\"third-party\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={false}\r\n        scroll={{ y: \"350px\" }}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ThirdParty;\r\n","import React from \"react\";\r\nimport { Table, Tag, Space } from \"antd\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"Inspector Name\",\r\n    dataIndex: \"name\",\r\n    key: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"Time\",\r\n    dataIndex: \"time\",\r\n    key: \"status\",\r\n  },\r\n  {\r\n    title: \"Score\",\r\n    key: \"score\",\r\n    dataIndex: \"score\",\r\n    render: (tag) => {\r\n      let color = \"green\";\r\n      if (tag > 21) {\r\n        color = \"volcano\";\r\n      }\r\n      return <Tag color={color}>{tag}</Tag>;\r\n    },\r\n  },\r\n];\r\n\r\nfunction WHOISData({ data }) {\r\n  return (\r\n    <div className=\"third-party\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={false}\r\n        scroll={{ y: \"350px\" }}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WHOISData;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.scss\";\r\n\r\nimport TitleBar from \"./Components/TitleBar\";\r\nimport ThirdParty from \"./Components/ThirdParty\";\r\nimport WHOIS from \"./Components/WHOIS\";\r\nimport { Input, Typography, Tabs, Card } from \"antd\";\r\nimport { Button, Tooltip } from \"antd\";\r\nimport { ProfileOutlined } from \"@ant-design/icons\";\r\nimport { Progress } from \"antd\";\r\n\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\nconst { Title } = Typography;\r\nconst { Paragraph } = Typography;\r\nconst electron = window.require(\"electron\");\r\nconst remote = electron.remote;\r\nconst dialog = remote.dialog;\r\n\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nfunction ResultTitle({ programState, signature }) {\r\n  if (programState == \"Idle\") {\r\n    return (\r\n      <>\r\n        <Title level={4}>Awaiting Input</Title>\r\n        <Paragraph>Please enter an IP to analyze</Paragraph>\r\n      </>\r\n    );\r\n  } else if (programState == \"Detecting\") {\r\n    return (\r\n      <>\r\n        <Title level={3}>Detecting</Title>\r\n        <Paragraph>Running modules...</Paragraph>\r\n      </>\r\n    );\r\n  } else if (programState == \"Bad\") {\r\n    return (\r\n      <>\r\n        <Title type=\"danger\" level={3}>\r\n          VPN/Proxy Detected\r\n        </Title>\r\n        <Paragraph>This IP is a VPN/Proxy {signature}</Paragraph>\r\n      </>\r\n    );\r\n  } else {\r\n    return (\r\n      <>\r\n        <Title level={3}>Good Ip</Title>\r\n        <Paragraph>A VPN or Proxy was not detected</Paragraph>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Single() {\r\n  function callback(key) {\r\n    console.log(key);\r\n  }\r\n  let [programState, updateProgramState] = useState(\"Idle\");\r\n  let [signatureMatched, updateSignatureMatched] = useState(\"\");\r\n  let [ip, updateIp] = useState(\"\");\r\n  let [score, updateScore] = useState(0);\r\n  let [thirdPartData, updateThirdPartyData] = useState([]);\r\n  let [whoisData, updateWhoISData] = useState([]);\r\n  let [logs, updateLogs] = useState([\"Sucessfully started program.\"]);\r\n\r\n  useEffect(() => {\r\n    ipcRenderer.on(\"thirdPartyData\", (e, data) => {\r\n      updateThirdPartyData(data);\r\n      console.log(data);\r\n    });\r\n\r\n    ipcRenderer.on(\"whoisData\", (e, result) => {\r\n      // console.log(result);\r\n      // alert(\"here\");\r\n      updateSignatureMatched(result.sig);\r\n      updateWhoISData(result.table);\r\n      updateScore(result.value);\r\n      if (result.value > 50) {\r\n        updateProgramState(\"Bad\");\r\n      } else {\r\n        updateProgramState(\"Good\");\r\n      }\r\n    });\r\n\r\n    return function cleanUp() {\r\n      ipcRenderer.removeAllListeners(\"thirdPartyData\");\r\n      ipcRenderer.removeAllListeners(\"whoisData\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"App\">\r\n        <div className=\"ipBox\">\r\n          <div>\r\n            <Title level={3}>Proxy VPN Check</Title>\r\n            <Paragraph className=\"subtitle\">\r\n              Start a comprehensive check to determine whether the given IP is a\r\n              VPN or Proxy\r\n            </Paragraph>\r\n          </div>\r\n          <Search\r\n            placeholder=\"127.0.0.1\"\r\n            loading={programState == \"Detecting\" ? true : false}\r\n            enterButton\r\n            onSearch={(value) => {\r\n              updateIp(value);\r\n              updateProgramState(\"Detecting\");\r\n              ipcRenderer.send(\"thirdPartyRecon\", value);\r\n              ipcRenderer.send(\"startWhoisModule\", value);\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"toplog\"></div>\r\n        <div className=\"info\">\r\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n            <TabPane tab=\"WHOIS Analysis\" key=\"1\">\r\n              <WHOIS data={whoisData} />\r\n            </TabPane>\r\n            <TabPane tab=\"Live Sources\" key=\"2\">\r\n              <ThirdParty data={thirdPartData} />\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n        {/* RESULT DISPLAY */}\r\n        <div className=\"result\">\r\n          <Card bordered={true} style={{ width: \"100%\" }}>\r\n            <div className=\"result\">\r\n              <div>\r\n                <Progress\r\n                  type=\"circle\"\r\n                  percent={score}\r\n                  width={80}\r\n                  status={score > 50 ? \"exception\" : \"\"}\r\n                  format={(percent) => percent + \"%\"}\r\n                />\r\n              </div>\r\n              <div>\r\n                <ResultTitle\r\n                  programState={programState}\r\n                  signature={signatureMatched}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Title level={3}>{ip}</Title>\r\n                <Paragraph>Infowise Beta 0.5</Paragraph>\r\n              </div>\r\n            </div>\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Single;\r\n","import React from \"react\";\r\nimport { Table, Tag, Space, Button } from \"antd\";\r\nconst electron = window.require(\"electron\");\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nconst columns = [\r\n  {\r\n    title: \"IP\",\r\n    dataIndex: \"ip\",\r\n    key: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n  {\r\n    title: \"Score\",\r\n    dataIndex: \"result\",\r\n    key: \"result\",\r\n    render: (tag) => {\r\n      let color = \"green\";\r\n      if (tag > 55) {\r\n        color = \"volcano\";\r\n      }\r\n      return <Tag color={color}>{tag}</Tag>;\r\n    },\r\n  },\r\n  {\r\n    title: \"Action\",\r\n    key: \"ip\",\r\n    dataIndex: \"ip\",\r\n    render: (tag) => {\r\n      return (\r\n        <Button\r\n          onClick={() => {\r\n            ipcRenderer.send(\"render-report\", tag);\r\n            alert(\"Report saved\");\r\n          }}\r\n        >\r\n          Details\r\n        </Button>\r\n      );\r\n    },\r\n  },\r\n];\r\n\r\nfunction WHOISData({ data }) {\r\n  return (\r\n    <div className=\"third-party\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={false}\r\n        scroll={{ y: \"350px\" }}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WHOISData;\r\n","import React from \"react\";\r\nimport { Table, Tag, Space, Button } from \"antd\";\r\n\r\nconst columns = [\r\n  {\r\n    title: \"IP\",\r\n    dataIndex: \"ip\",\r\n    key: \"name\",\r\n    render: (text) => <a>{text}</a>,\r\n  },\r\n];\r\n\r\nfunction ProcessingTable({ data }) {\r\n  return (\r\n    <div className=\"third-party\">\r\n      <Table\r\n        columns={columns}\r\n        dataSource={data}\r\n        pagination={false}\r\n        scroll={{ y: \"350px\" }}\r\n      />{\" \"}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProcessingTable;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.scss\";\r\n\r\nimport TitleBar from \"./Components/TitleBar\";\r\nimport ThirdParty from \"./Components/ThirdParty\";\r\nimport WHOIS from \"./Components/WHOIS\";\r\n\r\nimport IPDisplay from \"./Components/IPDisplay.js\";\r\nimport Processing from \"./Components/Processing.js\";\r\n\r\nimport { Input, Typography, Tabs, Card } from \"antd\";\r\nimport { Button, Tooltip } from \"antd\";\r\nimport {\r\n  ProfileOutlined,\r\n  UploadOutlined,\r\n  CheckOutlined,\r\n  WarningOutlined,\r\n  DotChartOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Progress } from \"antd\";\r\n\r\nimport { Statistic, Row, Col } from \"antd\";\r\n\r\nconst { Search } = Input;\r\nconst { TabPane } = Tabs;\r\nconst { Title } = Typography;\r\nconst { Paragraph } = Typography;\r\nconst electron = window.require(\"electron\");\r\nconst remote = electron.remote;\r\nconst dialog = remote.dialog;\r\n\r\nconst ipcRenderer = electron.ipcRenderer;\r\n\r\nfunction Batch() {\r\n  function callback(key) {\r\n    console.log(key);\r\n  }\r\n\r\n  let [good, updateGood] = useState([]);\r\n  let [bad, updateBad] = useState([]);\r\n  let [processing, updateProcessing] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // ipcRenderer.on(\"thirdPartyData\", (e, data) => {\r\n    //   updateThirdPartyData(data);\r\n    //   console.log(data);\r\n    // });\r\n\r\n    ipcRenderer.on(\"updateBatchState\", (e, state) => {\r\n      let good = [];\r\n      let bad = [];\r\n      let processing = [];\r\n\r\n      Object.keys(state).forEach((ip) => {\r\n        if (state[ip].status == 2) {\r\n          bad.push(state[ip]);\r\n        } else if (state[ip].status == 1) {\r\n          good.push(state[ip]);\r\n        } else {\r\n          processing.push(state[ip]);\r\n        }\r\n      });\r\n\r\n      updateGood(good);\r\n      updateBad(bad);\r\n      updateProcessing(processing);\r\n\r\n      console.log(state);\r\n    });\r\n    // ipcRenderer.on(\"whoisData\", (e, result) => {\r\n    //   // console.log(result);\r\n    //   // alert(\"here\");\r\n    //   updateSignatureMatched(result.sig);\r\n    //   updateWhoISData(result.table);\r\n    //   updateScore(result.value);\r\n    //   if (result.value > 65) {\r\n    //     updateProgramState(\"Bad\");\r\n    //   } else {\r\n    //     updateProgramState(\"Good\");\r\n    //   }\r\n    // });\r\n\r\n    return function cleanUp() {\r\n      ipcRenderer.removeAllListeners(\"updateBatchState\");\r\n      ipcRenderer.removeAllListeners(\"whoisData\");\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"App\">\r\n        <div className=\"ipBox\">\r\n          <div>\r\n            <Title level={3}>Batch Check</Title>\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                ipcRenderer.send(\"batchProcess\", \"start\");\r\n                // dialog.showOpenDialog({\r\n                //   properties: [\"openFile\"],\r\n                // });\r\n              }}\r\n            >\r\n              <UploadOutlined />\r\n            </Button>\r\n            <Paragraph className=\"subtitle\">\r\n              Masscheck IPs from .txt or csv.\r\n            </Paragraph>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"result\">\r\n          <Card bordered={true} style={{ width: \"100%\" }}>\r\n            <div className=\"result\">\r\n              <Statistic\r\n                title=\"Good\"\r\n                value={good.length}\r\n                precision={0}\r\n                valueStyle={{ color: \"#3f8600\" }}\r\n                prefix={<CheckOutlined />}\r\n                suffix=\"Ips\"\r\n              />\r\n              <Statistic\r\n                title=\"Bad\"\r\n                value={bad.length}\r\n                precision={0}\r\n                valueStyle={{ color: \"#cf1322\" }}\r\n                prefix={<WarningOutlined />}\r\n                suffix=\"Ips\"\r\n              />\r\n              <Statistic\r\n                title=\"Scanning\"\r\n                value={processing.length}\r\n                precision={0}\r\n                prefix={<DotChartOutlined />}\r\n                suffix=\"Ips\"\r\n              />\r\n            </div>\r\n          </Card>\r\n        </div>\r\n        <div className=\"toplog\"></div>\r\n        <div className=\"info\">\r\n          <Tabs defaultActiveKey=\"1\" onChange={callback}>\r\n            <TabPane tab=\"Good\" key=\"1\">\r\n              <IPDisplay data={good} />\r\n            </TabPane>\r\n            <TabPane tab=\"Bad\" key=\"2\">\r\n              <IPDisplay data={bad} />\r\n            </TabPane>\r\n            <TabPane tab=\"Processing\" key=\"3\">\r\n              <Processing data={processing} />\r\n            </TabPane>\r\n          </Tabs>\r\n        </div>\r\n        {/* RESULT DISPLAY */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Batch;\r\n","import React from \"react\";\r\nimport { Checkbox } from \"antd\";\r\n\r\nfunction CloudSettings() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Checkbox></Checkbox>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CloudSettings;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Single from \"./Single\";\r\nimport Batch from \"./Batch\";\r\nimport CloudSettings from \"./CloudSettings\";\r\n\r\nfunction ContentManager({ content }) {\r\n  if (content == 3) {\r\n    return <Batch />;\r\n  } else if (content == 9) {\r\n    return <CloudSettings />;\r\n  } else {\r\n    return <Single />;\r\n  }\r\n}\r\n\r\nexport default ContentManager;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./App.scss\";\r\nimport { Menu } from \"antd\";\r\nimport {\r\n  AppstoreOutlined,\r\n  MailOutlined,\r\n  SettingOutlined,\r\n  AreaChartOutlined,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { Layout } from \"antd\";\r\nimport TitleBar from \"./Components/TitleBar\";\r\nimport ContentManager from \"./ContentManager\";\r\n\r\nconst { Header, Footer, Sider, Content } = Layout;\r\n\r\nconst { SubMenu } = Menu;\r\n\r\nfunction App() {\r\n  let [content, updateContent] = useState(0);\r\n  const handleClick = (e) => {\r\n    console.log(\"click \", e);\r\n    updateContent(e.key);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TitleBar />\r\n      <Layout>\r\n        <Sider>\r\n          <Menu\r\n            onClick={handleClick}\r\n            style={{ width: 200, height: \"100vh\" }}\r\n            defaultSelectedKeys={[\"1\"]}\r\n            defaultOpenKeys={[\"sub1\"]}\r\n            mode=\"inline\"\r\n          >\r\n            <SubMenu\r\n              key=\"sub1\"\r\n              title={\r\n                <span>\r\n                  <AreaChartOutlined />\r\n                  <span>Test IPS</span>\r\n                </span>\r\n              }\r\n            >\r\n              <Menu.ItemGroup key=\"g1\" title=\"Single IPs\">\r\n                <Menu.Item key=\"1\">Complete Test</Menu.Item>\r\n              </Menu.ItemGroup>\r\n              <Menu.ItemGroup key=\"g2\" title=\"Batch IPs\">\r\n                <Menu.Item key=\"3\">Batch Test</Menu.Item>\r\n              </Menu.ItemGroup>\r\n            </SubMenu>\r\n            <SubMenu\r\n              key=\"sub2\"\r\n              icon={<AppstoreOutlined />}\r\n              title=\"Navigation Two\"\r\n            >\r\n              <Menu.Item key=\"5\">Option 5</Menu.Item>\r\n              <Menu.Item key=\"6\">Option 6</Menu.Item>\r\n              <SubMenu key=\"sub3\" title=\"Submenu\">\r\n                <Menu.Item key=\"7\">Option 7</Menu.Item>\r\n                <Menu.Item key=\"8\">Option 8</Menu.Item>\r\n              </SubMenu>\r\n            </SubMenu>\r\n            <SubMenu\r\n              key=\"sub4\"\r\n              title={\r\n                <span>\r\n                  <SettingOutlined />\r\n                  <span>Settings</span>\r\n                </span>\r\n              }\r\n            >\r\n              <Menu.Item key=\"9\">Cloud</Menu.Item>\r\n              <Menu.Item key=\"10\">Module Preferences</Menu.Item>\r\n            </SubMenu>\r\n          </Menu>\r\n        </Sider>\r\n        <Content>\r\n          <ContentManager content={content} />\r\n        </Content>\r\n      </Layout>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}